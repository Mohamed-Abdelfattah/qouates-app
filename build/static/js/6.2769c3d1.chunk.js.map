{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/add-quote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","textInputRef","useState","flag","setFlag","when","message","location","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","onFocus","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","AddQuote","history","useHistory","useHttp","addQuote","sendRequest","status","useEffect","push","Fragment","quote"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,kHCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCmE/BC,EA/DG,SAACL,GACjB,IAAMM,EAAiBC,mBACjBC,EAAeD,mBAKrB,EAAwBE,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAiBA,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CACEC,KAAMF,EACNG,QAAS,SAACC,GAAD,MACP,6EAGJ,cAAC,EAAD,UACE,uBACEb,UAAWC,IAAQa,KACnBC,SA1BR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBb,EAAec,QAAQC,MACvCC,EAAcd,EAAaY,QAAQC,MAIzCrB,EAAMuB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAmB1CI,QAAS,kBAAMf,GAAQ,IAHzB,UAKGX,EAAM2B,WACL,qBAAK1B,UAAWC,IAAQ0B,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK5B,UAAWC,IAAQ4B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK5B,OAEtC,sBAAKL,UAAWC,IAAQ4B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAK1B,OAEpC,qBAAKP,UAAWC,IAAQkC,QAAxB,SACE,wBAAQC,QAjCS,WACzB1B,GAAQ,IAgCqCV,UAAU,MAA/C,kCC5BGqC,UA1BE,SAACtC,GAEhB,IAAMuC,EAAUC,cAChB,EAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAErBC,qBAAU,WACO,cAAXD,GACFL,EAAQO,KAAK,aAEd,CAACF,EAAQL,IAOZ,OACE,cAAC,IAAMQ,SAAP,UACE,cAAC,EAAD,CACExB,WARkB,SAACyB,GAEvBL,EAAYK,IAORrB,UAAsB,YAAXiB","file":"static/js/6.2769c3d1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__2ZuXB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3QeBD\",\"loading\":\"QuoteForm_loading__2dlZc\",\"control\":\"QuoteForm_control__2aWSw\",\"actions\":\"QuoteForm_actions__2m56n\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  // to prompet user when he tries to leave the page that data in input fields will be lost\n  // we will set a flag that validates to true when the form gets a focus (changes happen)\n  // this flag will prevent form submission and also allow prompt to warn user\n  const [flag, setFlag] = useState(false);\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const allowSubmitHandler = () => {\n    setFlag(false);\n  };\n\n  return (\n    <Fragment>\n      <Prompt\n        when={flag}\n        message={(location) =>\n          'Are you sure you want to leave this page, all unsaved data will be lost'\n        }\n      />\n      <Card>\n        <form\n          className={classes.form}\n          onSubmit={submitFormHandler}\n          onFocus={() => setFlag(true)}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={allowSubmitHandler} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport useHttp from '../hooks/use-http';\r\nimport { addQuote } from '../lib/api';\r\nimport QuoteForm from '../components/quotes/QuoteForm';\r\n\r\nconst AddQuote = (props) => {\r\n  //\r\n  const history = useHistory();\r\n  const { sendRequest, status } = useHttp(addQuote);\r\n\r\n  useEffect(() => {\r\n    if (status === 'completed') {\r\n      history.push('/quotes');\r\n    }\r\n  }, [status, history]);\r\n\r\n  const addQuoteHandler = (quote) => {\r\n    // console.log(quote);\r\n    sendRequest(quote);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <QuoteForm\r\n        onAddQuote={addQuoteHandler}\r\n        isLoading={status === 'pending'}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddQuote;\r\n"],"sourceRoot":""}