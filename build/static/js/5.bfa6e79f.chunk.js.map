{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/quotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","quotesArray","typeOfSortingIsAscending","history","useHistory","location","useLocation","shouldSortingBeAscending","URLSearchParams","search","get","sortedQuotes","quotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","NoQuotesFound","noquotes","Quotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,wFCkBdC,EAhBG,SAACC,GACjB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAAMC,GAAE,kBAAaN,EAAMO,IAAMN,UAAU,MAA3C,iC,iBC+CSO,EA3CG,SAACR,GAEjB,IAZkBS,EAAaC,EAYzBC,EAAUC,cACVC,EAAWC,cAMXC,EAAuD,QAJzC,IAAIC,gBAAgBH,EAASI,QAIJC,IAAI,QAC3CC,GApBYV,EAoBcT,EAAMoB,OApBPV,EAoBeK,EAnBvCN,EAAYY,MAAK,SAACC,EAAQC,GAC/B,OAAIb,EACKY,EAAOf,GAAKgB,EAAOhB,GAAK,GAAK,EAE7Be,EAAOf,GAAKgB,EAAOhB,GAAK,GAAK,MA2BxC,OACE,eAAC,WAAD,WACE,qBAAKN,UAAWC,IAAQsB,QAAxB,SACE,yBAAQC,QAbe,WAC3Bd,EAAQe,KAAK,CACXC,SAAUd,EAASc,SACnBV,OAAO,SAAD,OAAWF,EAA2B,OAAS,UAUnD,kBACQA,EAA2B,aAAe,iBAGpD,oBAAId,UAAWC,IAAQ0B,KAAvB,SACGT,EAAaU,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEvB,GAAIuB,EAAMvB,GACVF,OAAQyB,EAAMzB,OACdD,KAAM0B,EAAM1B,MAHP0B,EAAMvB,a,iBClCRwB,EAXO,WACpB,OACE,sBAAK9B,UAAWC,IAAQ8B,SAAxB,UACE,iDACA,cAAC,IAAD,CAAM1B,GAAG,aAAaL,UAAU,MAAhC,6B,wBC+BSgC,UA/BA,SAACjC,GAEd,MAKIkC,YAAQC,KAAc,GAJxBC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMC,EAHR,EAGEC,KACAC,EAJF,EAIEA,MAOF,OAJAC,qBAAU,WACRL,MACC,CAACA,IAEW,YAAXC,EAEA,qBAAKpC,UAAU,WAAf,SACE,cAACyC,EAAA,EAAD,MAKFF,EACK,mBAAGvC,UAAU,mBAAb,SAAiCuC,IAG3B,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,OAGtD,cAAC,EAAD,CAAWvB,OAAQkB,IAFjB,cAAC,EAAD","file":"static/js/5.bfa6e79f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__27pxr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3Muak\",\"sorting\":\"QuoteList_sorting__WiC5m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__2I22x\"};","import { Link } from 'react-router-dom';\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className=\"btn\">\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotesArray, typeOfSortingIsAscending) => {\n  return quotesArray.sort((quoteA, quoteB) => {\n    if (typeOfSortingIsAscending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  //\n  const history = useHistory();\n  const location = useLocation();\n  // console.log(location);\n  const queryParams = new URLSearchParams(location.search);\n  // for (let val of queryParams.keys()) {\n  //   console.log(val, queryParams.get(val));\n  // }\n  const shouldSortingBeAscending = queryParams.get('sort') === 'asc';\n  const sortedQuotes = sortQuotes(props.quotes, shouldSortingBeAscending);\n\n  const changeSortingHandler = () => {\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${shouldSortingBeAscending ? 'desc' : 'asc'}`,\n    });\n    // history.push(\n    //   `${location.pathname}?sort=${shouldSortingBeAscending ? 'desc' : 'asc'}`\n    // );\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {shouldSortingBeAscending ? 'Descending' : 'Ascending'}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { Link } from 'react-router-dom';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to=\"/new-quote\" className=\"btn\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { useEffect } from 'react';\r\nimport QuoteList from '../components/quotes/QuoteList';\r\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getAllQuotes } from '../lib/api';\r\n\r\nconst Quotes = (props) => {\r\n  //\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuotes,\r\n    error,\r\n  } = useHttp(getAllQuotes, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest();\r\n  }, [sendRequest]);\r\n\r\n  if (status === 'pending') {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered focused\">{error}</p>;\r\n  }\r\n\r\n  if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n    return <NoQuotesFound />;\r\n  }\r\n  return <QuoteList quotes={loadedQuotes} />;\r\n};\r\n\r\nexport default Quotes;\r\n"],"sourceRoot":""}